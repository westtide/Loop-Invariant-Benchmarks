(set-logic NIA)

(synth-inv inv_fun ((c Int) (x Int) (y Int) (z Int) (x0 Int) (y0 Int) (z0 Int)))

(declare-primed-var c Int)
(declare-primed-var x Int)
(declare-primed-var y Int)
(declare-primed-var z Int)
(declare-primed-var x0 Int)
(declare-primed-var y0 Int)
(declare-primed-var z0 Int)

(define-fun pre_fun ((c Int) (x Int) (y Int) (z Int) (x0 Int) (y0 Int) (z0 Int)) Bool
  (and (= c 0) (= x x0) (= y y0) (= z z0)))

(define-fun trans_fun ((c Int) (x Int) (y Int) (z Int) (x0 Int) (y0 Int) (z0 Int)
                       (c! Int) (x! Int) (y! Int) (z! Int) (x0! Int) (y0! Int) (z0! Int)) Bool
  (and (= x0! x0) (= y0! y0) (= z0! z0)
       (or (and (< x y)
                (= c! c) (= x! x) (= y! y) (= z! z))
           (and (>= x y)
                (= c! (+ c 1)) (= x! (+ x 1)) (= y! (+ y x)) (= z! z))
           (and (>= x y)
                (= c! (+ c 1)) (= x! (- x z)) (= y! (+ y (* z z))) (= z! (- z 1))))
  ))

(define-fun post_fun ((c Int) (x Int) (y Int) (z Int) (x0 Int) (y0 Int) (z0 Int)) Bool
  (ite (>= x0 y0)
       (<= c (- (+ x0 (* z0 z0)) y0))
       (= c 0)))

(inv-constraint inv_fun pre_fun trans_fun post_fun)

(check-synth)
