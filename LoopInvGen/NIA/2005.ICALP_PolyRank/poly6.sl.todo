(set-logic NIA)

(synth-inv inv_fun ((c Int) (x Int) (y Int) (x0 Int) (y0 Int) (N Int)))

(declare-primed-var c Int)
(declare-primed-var x Int)
(declare-primed-var y Int)
(declare-primed-var x0 Int)
(declare-primed-var y0 Int)
(declare-primed-var N Int)

(define-fun pre_fun ((c Int) (x Int) (y Int) (x0 Int) (y0 Int) (N Int)) Bool
  (and (= c 0) (= x x0) (= y y0) (>= (+ x y) 0)))

(define-fun trans_fun ((c Int) (x Int) (y Int) (x0 Int) (y0 Int) (N Int)
                       (c! Int) (x! Int) (y! Int) (x0! Int) (y0! Int) (N! Int)) Bool
  (and (= x0! x0) (= y0! y0) (= N! N)
       (or (and (> x N)
                (= c! c) (= x! x) (= y! y))
           (and (<= x N)
                (= c! (+ c 1)) (>= x! (+ (* 2 x) y)) (>= y! (+ y 1)))
           (and (<= x N)
                (= c! (+ c 1)) (>= x! (+ x 1)) (= y! y)))
  ))

(define-fun post_fun ((c Int) (x Int) (y Int) (x0 Int) (y0 Int) (N Int)) Bool
  (=> (<= x N)
      (ite (and (>= x0 N) (>= (+ x0 y0) 0))
           (<= c (+ x0 y0 (- x0 N)))
           (= c 0))))

(inv-constraint inv_fun pre_fun trans_fun post_fun)

(check-synth)
